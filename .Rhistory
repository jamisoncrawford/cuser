#' Defaults to \code{TRUE}.
#'
#' @return A tabular object of class \code{data.frame} containing five variants
#' of 55 Syracuse, NY census tracts. Variants may be previewed in package
#' \code{cuser} dataset \code{tracts}. Output may be ordered with duplicates
#' and missing values removed depending on inputs to logical arguments
#' \code{order =}, \code{duplicate.rm =}, and \code{na.rm = }, respectively.
#'
#' @author Jamison R. Crawford, Social Sector Data Science Consultant
#'
#' @seealso \code{tracts}, \code{merge}, \code{order}, \code{duplicated}, \code{complete.cases}
#'
#' @export
expand_ct <- function(tracts, order = TRUE, duplicate.rm = FALSE, na.rm = TRUE){
error_vct <- paste0("Argument 'tracts =' is not of ",
"class 'vector'; please cast as",
" vector with function 'as.vect",
"or()' or extract the variable ",
"as a vector using 'data$variab",
"le' syntax.")
warn_leng <- paste0("One or more values passed to 'tracts =' were either duplicates")
if(!is.vector(tracts)){stop(error_vct, call. = F)}
geoid <- readRDS("sysdata.rds")
trc <- tracts
ord <- order
dup <- duplicate.rm
nar <- na.rm
all <- geoid
full <- sum(all$full_ct %in% trc, T)
trim <- sum(all$trim_ct %in% trc, T)
decm <- sum(all$dec_ct %in% trc, T)
intg <- sum(all$int_ct %in% trc, T)
labl <- sum(all$lab_ct %in% trc, T)
index <- which(c(full,
trim,
decm,
intg,
labl) == max(full,
trim,
decm,
intg,
labl))
col <- names(all[, index])
trc <- data.frame(trc,
stringsAsFactors = FALSE)
names(trc) <- col
trc$order <- 1:nrow(trc)
df <- merge(x = trc, y = all, by = col, all.x = TRUE)
df <- df[sort.list(df$order), -which(names(df) == "order")]
index_ord <- order(df[[col]])
if (ord == TRUE){df <- df[index_ord, ]}
index_dup <- which(!duplicated(df))
if (dup == TRUE){df <- df[index_dup, ]}
index_nar <- which(complete.cases(df))
if (nar == TRUE){df <- df[index_nar, ]}
names(df)[which(names(df) == "int_ct")] <- "abbreviated"
names(df)[which(names(df) == "dec_ct")] <- "decimal_zeroes"
names(df)[which(names(df) == "lab_ct")] <- "labels"
names(df)[which(names(df) == "full_ct")] <- "fips_geoid"
names(df)[which(names(df) == "trim_ct")] <- "decimal_trimmed"
return(df)
}
library(cuser)
expand_ct(tracts = c("1.00", "2.00"))
library(readxl)
dss <- read_excel("C:/Users/jamis/Downloads/Ridzi_3_3_20.xlsx")
View(Ridzi_3_3_20)
filter_ta(data = dss)
library(cuser)
cuser::expand_ct
library(cuser)
expand_ct(tracts = c("1.00", "3.00", "5.01"))
expand_ct(tracts = c("1", "3", "5.01"))
x <- c("1", "3", "5.01")
filter_ta(data = dss)
expand_ct <- function(tracts, order = TRUE, duplicate.rm = FALSE, na.rm = TRUE){
error_vct <- paste0("Argument 'tracts =' is not of ",
"class 'vector'; please cast as",
" vector with function 'as.vect",
"or()' or extract the variable ",
"as a vector using 'data$variab",
"le' syntax.")
warn_leng <- paste0("One or more values passed to 'tracts =' were either duplicates")
if(!is.vector(tracts)){stop(error_vct, call. = F)}
all <- readRDS("sysdata.rds")
trc <- tracts
ord <- order
dup <- duplicate.rm
nar <- na.rm
full <- sum(all$full_ct %in% trc, T)
trim <- sum(all$trim_ct %in% trc, T)
decm <- sum(all$dec_ct %in% trc, T)
intg <- sum(all$int_ct %in% trc, T)
labl <- sum(all$lab_ct %in% trc, T)
index <- which(c(full,
trim,
decm,
intg,
labl) == max(full,
trim,
decm,
intg,
labl))
col <- names(all[, index])
trc <- data.frame(trc,
stringsAsFactors = FALSE)
names(trc) <- col
trc$order <- 1:nrow(trc)
df <- merge(x = trc, y = all, by = col, all.x = TRUE)
df <- df[sort.list(df$order), -which(names(df) == "order")]
index_ord <- order(df[[col]])
if (ord == TRUE){df <- df[index_ord, ]}
index_dup <- which(!duplicated(df))
if (dup == TRUE){df <- df[index_dup, ]}
index_nar <- which(complete.cases(df))
if (nar == TRUE){df <- df[index_nar, ]}
names(df)[which(names(df) == "int_ct")] <- "abbreviated"
names(df)[which(names(df) == "dec_ct")] <- "decimal_zeroes"
names(df)[which(names(df) == "lab_ct")] <- "labels"
names(df)[which(names(df) == "full_ct")] <- "fips_geoid"
names(df)[which(names(df) == "trim_ct")] <- "decimal_trimmed"
return(df)
}
expand_ct(tracts = x)
all <- readRDS("sysdata.rds")
tracts <- x
ord <- order
dup <- duplicate.rm
nar <- na.rm
full <- sum(all$full_ct %in% trc, T)
trim <- sum(all$trim_ct %in% trc, T)
trc <- tracts
full <- sum(all$full_ct %in% trc, T)
trim <- sum(all$trim_ct %in% trc, T)
decm <- sum(all$dec_ct %in% trc, T)
intg <- sum(all$int_ct %in% trc, T)
labl <- sum(all$lab_ct %in% trc, T)
labl
intg
decm
trim
full
index <- which(c(full,
trim,
decm,
intg,
labl) == max(full,
trim,
decm,
intg,
labl))
index
intg
col <- names(all[, index])
col
col
all[, index]
index
all
all[, index]
names(all[, index])
all[[index]]
names(all[[index]])
all[, index]
data.frame(all[, index])
col <- names(data.frame(all[[index]]))
col
all
names(all)
col <- names(all)[index]
col
trc <- data.frame(trc,
stringsAsFactors = FALSE)
trc
names(trc) <- col
trc
trc$order <- 1:nrow(trc)
trc$order
df <- merge(x = trc, y = all, by = col, all.x = TRUE)
df
df <- df[sort.list(df$order), -which(names(df) == "order")]
df
index_ord <- order(df[[col]])
index_ord
library(cuser)
rm(expand_ct())
rm(expand_ct)
remove(ord)
library(cuser)
expand_ct(tracts = x)
library(cuser)
library(devtools)
install_github("jamisoncrawford/cuser")
library(cuser)
cuser
?cuser
?filter_ta
?cuser
??cuser
library(panthr)
?panthr
?decode_attribute
??expand_ct
library(cuser)
??expand_ct
expand_ct
??filter(ta)
??filter_ta
??filter_ta
??expand_ct
??cuser::expand_ct
help(cuser::expand_ct)
help(expand_ct)
help(filter_ta)
help(expand_ct)
help(filter_ta)
library(cuser)
library(cuser)
library(cuser)
library(cuser)
library(cuser)
library(cuser)
filter_ta <- function(data, tracts = 1, cases = 2, individuals = 3, date = NA){
error_df <- paste0("Argument 'data =' is not of class ",
"'data.frame'; please cast as 'data",
".frame' with function 'as.data.frame()'.")
if (!is.data.frame(data)){stop(error_df, call. = F)}
tracts <- readRDS("sysdata.rds")
names(tracts)[1] <- "geoid"
d <- data
f <- data.frame(geoid = tracts$geoid)
t <- as.character(d[[1]])
g <- as.character(d[[1]])
c <- as.numeric(d[[2]])
i <- as.numeric(d[[3]])
g <- ifelse(grepl("\\.", g), g, paste0(g, ".00"))
g <- gsub("\\.", "", g)
g <- ifelse(nchar(g) == 3,
paste0("00", g),
ifelse(nchar(g) == 4,
paste0("0", g), g))
g <- paste0("360670", g)
df <- data.frame(geoid = g,
tract = t,
cases = c,
individuals = i,
stringsAsFactors = F)
df <- merge(x = f, y = df, by = "geoid", all.x = TRUE)
df <- df[order(df$geoid), ]
df$date <- date
return(df)
}
filter_ta(dss)
filter_ta(dss, date = "2020-03-21")
test <- filter_ta(dss, date = "2020-03-21")
str(test)
filter_ta <- function(data, tracts = 1, cases = 2, individuals = 3, date = NA){
error_df <- paste0("Argument 'data =' is not of class ",
"'data.frame'; please cast as 'data",
".frame' with function 'as.data.frame()'.")
if (!is.data.frame(data)){stop(error_df, call. = F)}
tracts <- readRDS("sysdata.rds")
names(tracts)[1] <- "geoid"
d <- data
f <- data.frame(geoid = tracts$geoid)
t <- as.character(d[[1]])
g <- as.character(d[[1]])
c <- as.numeric(d[[2]])
i <- as.numeric(d[[3]])
g <- ifelse(grepl("\\.", g), g, paste0(g, ".00"))
g <- gsub("\\.", "", g)
g <- ifelse(nchar(g) == 3,
paste0("00", g),
ifelse(nchar(g) == 4,
paste0("0", g), g))
g <- paste0("360670", g)
df <- data.frame(geoid = g,
tract = t,
cases = c,
individuals = i,
stringsAsFactors = F)
df <- merge(x = f, y = df, by = "geoid", all.x = TRUE)
df <- df[order(df$geoid), ]
if(!is.na(date)){df$date <- date}
return(df)
}
filter_ta(dss, date = "2020-03-21")
filter_ta(dss)
mtcars[,-"mpg"]
mtcars[,-c("mpg")]
mtcars[,c("mpg")]
mtcars[, -mpg]
mtcars[, -mtcars$mpg]
filter_ta <- function(data, tracts = 1,
cases = 2,
individuals = 3,
date = NA,
format = TRUE){
error_df <- paste0("Argument 'data =' is not of class ",
"'data.frame'; please cast as 'data",
".frame' with function 'as.data.frame()'.")
if (!is.data.frame(data)){stop(error_df, call. = F)}
tracts <- readRDS("sysdata.rds")
names(tracts)[1] <- "geoid"
d <- data
f <- data.frame(geoid = tracts$geoid)
t <- as.character(d[[1]])
g <- as.character(d[[1]])
c <- as.numeric(d[[2]])
i <- as.numeric(d[[3]])
g <- ifelse(grepl("\\.", g), g, paste0(g, ".00"))
g <- gsub("\\.", "", g)
g <- ifelse(nchar(g) == 3,
paste0("00", g),
ifelse(nchar(g) == 4,
paste0("0", g), g))
g <- paste0("360670", g)
df <- data.frame(tract = t,
geoid = g,
cases = c,
individuals = i,
stringsAsFactors = F)
df <- merge(x = f, y = df, by = "geoid", all.x = TRUE)
df <- df[order(df$geoid), ]
if(!is.na(date) & format == FALSE){
df$date <- date
df <- df[, c("tract", "geoid", "date", "cases", "individuals")]
}
if(format == TRUE){
df$date <- date
ind <- df[, c("tract", "geoid", "date", "individuals")]
names(ind)[4] <- "count"
ind$indicator <- "TAI"
ind <- ind[, c("tract", "geoid", "indicator", "date", "count")]
cas <- df[, c("tract", "geoid", "date", "cases")]
names(cas)[4] <- "count"
ind$indicator <- "TAC"
cas <- cas[, c("tract", "geoid", "indicator", "date", "count")]
df <- rbind(ind, cas)
}
return(df)
}
filter_ta(dss)
data <- dss
d <- data
f <- data.frame(geoid = tracts$geoid)
t <- as.character(d[[1]])
g <- as.character(d[[1]])
c <- as.numeric(d[[2]])
i <- as.numeric(d[[3]])
g <- ifelse(grepl("\\.", g), g, paste0(g, ".00"))
g <- gsub("\\.", "", g)
g <- ifelse(nchar(g) == 3,
paste0("00", g),
ifelse(nchar(g) == 4,
paste0("0", g), g))
g <- paste0("360670", g)
df <- data.frame(tract = t,
geoid = g,
cases = c,
individuals = i,
stringsAsFactors = F)
df <- merge(x = f, y = df, by = "geoid", all.x = TRUE)
df <- df[order(df$geoid), ]
df$date <- date
ind <- df[, c("tract", "geoid", "date", "individuals")]
names(ind)[4] <- "count"
ind$indicator <- "TAI"
ind <- ind[, c("tract", "geoid", "indicator", "date", "count")]
cas <- df[, c("tract", "geoid", "date", "cases")]
names(cas)[4] <- "count"
ind$indicator <- "TAC"
cas <- cas[, c("tract", "geoid", "indicator", "date", "count")]
df <- rbind(ind, cas)
d <- data
f <- data.frame(geoid = tracts$geoid)
t <- as.character(d[[1]])
tracts <- readRDS("sysdata.rds")
names(tracts)[1] <- "geoid"
d <- data
f <- data.frame(geoid = tracts$geoid)
t <- as.character(d[[1]])
g <- as.character(d[[1]])
c <- as.numeric(d[[2]])
i <- as.numeric(d[[3]])
g <- ifelse(grepl("\\.", g), g, paste0(g, ".00"))
g <- gsub("\\.", "", g)
g <- ifelse(nchar(g) == 3,
paste0("00", g),
ifelse(nchar(g) == 4,
paste0("0", g), g))
g <- paste0("360670", g)
df <- data.frame(tract = t,
geoid = g,
cases = c,
individuals = i,
stringsAsFactors = F)
df <- merge(x = f, y = df, by = "geoid", all.x = TRUE)
df <- df[order(df$geoid), ]
df$date <- date
tracts <- readRDS("sysdata.rds")
names(tracts)[1] <- "geoid"
d <- data
f <- data.frame(geoid = tracts$geoid)
t <- as.character(d[[1]])
g <- as.character(d[[1]])
c <- as.numeric(d[[2]])
i <- as.numeric(d[[3]])
g <- ifelse(grepl("\\.", g), g, paste0(g, ".00"))
g <- gsub("\\.", "", g)
g <- ifelse(nchar(g) == 3,
paste0("00", g),
ifelse(nchar(g) == 4,
paste0("0", g), g))
g <- paste0("360670", g)
df <- data.frame(tract = t,
geoid = g,
cases = c,
individuals = i,
stringsAsFactors = F)
df <- merge(x = f, y = df, by = "geoid", all.x = TRUE)
df <- df[order(df$geoid), ]
dt <- date
dt
date
date <- "2019-03-12"
dt <- date
dt
df$date
df$date <- dt
ind <- df[, c("tract", "geoid", "date", "individuals")]
names(ind)[4] <- "count"
ind$indicator <- "TAI"
ind <- ind[, c("tract", "geoid", "indicator", "date", "count")]
cas <- df[, c("tract", "geoid", "date", "cases")]
names(cas)[4] <- "count"
ind$indicator <- "TAC"
cas <- cas[, c("tract", "geoid", "indicator", "date", "count")]
cas <- cas[, c("tract", "geoid", "indicator", "date", "count")]
cas
cas$indicator <- "TAC"
cas <- cas[, c("tract", "geoid", "indicator", "date", "count")]
df <- rbind(ind, cas)
filter_ta <- function(data, tracts = 1,
cases = 2,
individuals = 3,
date = NA,
format = TRUE){
error_df <- paste0("Argument 'data =' is not of class ",
"'data.frame'; please cast as 'data",
".frame' with function 'as.data.frame()'.")
if (!is.data.frame(data)){stop(error_df, call. = F)}
tracts <- readRDS("sysdata.rds")
names(tracts)[1] <- "geoid"
d <- data
f <- data.frame(geoid = tracts$geoid)
t <- as.character(d[[1]])
g <- as.character(d[[1]])
c <- as.numeric(d[[2]])
i <- as.numeric(d[[3]])
g <- ifelse(grepl("\\.", g), g, paste0(g, ".00"))
g <- gsub("\\.", "", g)
g <- ifelse(nchar(g) == 3,
paste0("00", g),
ifelse(nchar(g) == 4,
paste0("0", g), g))
g <- paste0("360670", g)
df <- data.frame(tract = t,
geoid = g,
cases = c,
individuals = i,
stringsAsFactors = F)
df <- merge(x = f, y = df, by = "geoid", all.x = TRUE)
df <- df[order(df$geoid), ]
dt <- date
if(!is.na(date) & format == FALSE){
df$date <- dt
df <- df[, c("tract", "geoid", "date", "cases", "individuals")]
}
if(format == TRUE){
df$date <- dt
ind <- df[, c("tract", "geoid", "date", "individuals")]
names(ind)[4] <- "count"
ind$indicator <- "TAI"
ind <- ind[, c("tract", "geoid", "indicator", "date", "count")]
cas <- df[, c("tract", "geoid", "date", "cases")]
names(cas)[4] <- "count"
cas$indicator <- "TAC"
cas <- cas[, c("tract", "geoid", "indicator", "date", "count")]
df <- rbind(ind, cas)
}
return(df)
}
filter_ta(dss)
filter_ta(dss, date = "2020-03-21")
filter_ta(dss, format = FALSE)
filter_ta(dss, format = FALSE, date = "2020-03-19")
filter_ta(dss)
library(cuser)
library(cuser)
library(cuser)
library(readxl)
dss <- read_excel("C:/Users/jamis/Downloads/Ridzi_3_3_20.xlsx")
View(Ridzi_3_3_20)
library(readxl)
dss <- read_excel("C:/Users/jamis/Downloads/Ridzi_3_3_20.xlsx")
x <- filter_ta(dss)
View(x)
x <- filter_ta(dss, date = "2020-03-01")
write_csv(x, "ta.csv")
write.csv(x, "ta.csv")
getwd()
